name: Containers deploy

on:
  workflow_run:
    workflows: ["Container build and push"]
    types:
    - completed

env: 
  AWS_REGION: ca-central-1
  ECS_CLUSTER: superset
  REGISTRY: ${{ vars.PROD_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com/superset
  GITHUB_SHA: ${{ github.sha }}

permissions:
  id-token: write

jobs:
  containers-deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - superset
          - celery-worker
          - celery-beat
    steps:
    - name: Audit DNS requests
      uses: cds-snc/dns-proxy-action@main
      env:
        DNS_PROXY_FORWARDTOSENTINEL: "true"
        DNS_PROXY_LOGANALYTICSWORKSPACEID: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
        DNS_PROXY_LOGANALYTICSSHAREDKEY: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}

    # TODO: Replace with a locked down IAM role
    - name: configure aws credentials using OIDC
      uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
      with:
        role-to-assume: arn:aws:iam::${{ vars.PROD_AWS_ACCOUNT_ID }}:role/cds-superset-apply 
        role-session-name: DeployContainer
        aws-region: ${{ env.AWS_REGION }}

    - name: Download ECS task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ matrix.service }} \
          --query taskDefinition > task-definition.json

    - name: Update ECS task image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@4225e0b507142a2e432b018bc3ccb728559b437a # v1.2.0
      with:
        task-definition: task-definition.json
        container-name: ${{ matrix.service }}
        image: ${{ env.REGISTRY }}:sha-${{ env.GITHUB_SHA }}

    - name: Deploy updated ECS task
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a # v1.4.11
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ matrix.service }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
